name: 'Docker Build Image'
description: 'Build an docker image'
inputs:
  DOCKER_IMAGE:
    description: "Image name to build"
    required: true
  
  DOCKER_TAG:
    description: "Tag name to build"
    required: true
  
  COMPOSER_AUTH_JSON:
    description: "base64 string of auth.json for composer"
    required: false

  context:
    description: "Path to the directory where the Dockerfile is located"
    default: "."
    required: true
  
  file:
    description: "Path to the Dockerfile"
    required: true
  
  target:
    description: "Target to build"
    default: ""
    required: false
  
  Username:
    description: "Username for registry"
    required: true
  
  Password:
    description: "Password for registry"
    required: true    
  
  build-args:
    description: "Build args as json array"
    required: false

outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Check if checkout is necessary
      id: check
      shell: bash
      run: |
        if [ -d "$(pwd)/.git/" ]; then
          echo "checkout=false" >> $GITHUB_OUTPUT
        else
          echo "checkout=true" >> $GITHUB_OUTPUT
        fi
    - uses: actions/checkout@v3
      if: steps.check.outputs.checkout == 'true'
    - name: Set composer auth
      shell: bash
      if: inputs.COMPOSER_AUTH_JSON != ''
      id: composer_auth
      run: |
        echo -n "${{ inputs.COMPOSER_AUTH_JSON }}" | base64 --decode > ${{matrix.context}}/auth.json
    - name: Set outputs
      shell: bash
      id: vars
      run: |
        echo "docker_tag=${{ inputs.DOCKER_TAG }}" >> $GITHUB_OUTPUT
        echo "DOCKER_IMAGE=${{ inputs.DOCKER_IMAGE }}" >> $GITHUB_OUTPUT
        echo "BUILD_ARGS=${{ inputs.build-args }}" >> $GITHUB_OUTPUT
    - name: Set up Docker Context for Buildx
      shell: bash
      id: buildx-context
      run: |
        docker context inspect builders || docker context create builders

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        endpoint: builders

    - name: Inspect builder
      shell: bash
      run: |
        echo "Name:      ${{ steps.buildx.outputs.name }}"
        echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
        echo "Status:    ${{ steps.buildx.outputs.status }}"
        echo "Flags:     ${{ steps.buildx.outputs.flags }}"
        echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.Username }}
        password: ${{ inputs.Password }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.vars.outputs.DOCKER_IMAGE }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        push: true
        pull: true
        target: "${{inputs.target}}"
        build-args: |
          ${{ steps.vars.outputs.BUILD_ARGS }}
        cache-from: type=registry,ref=${{ inputs.DOCKER_IMAGE }}:latest
        cache-to: type=inline
        tags: |
          ${{ steps.vars.outputs.DOCKER_IMAGE }}:${{ steps.vars.outputs.docker_tag }}
          ${{ steps.vars.outputs.DOCKER_IMAGE }}:latest
        labels: ${{ steps.meta.outputs.labels }}